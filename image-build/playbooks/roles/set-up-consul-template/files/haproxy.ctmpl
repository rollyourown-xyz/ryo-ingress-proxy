# SPDX-FileCopyrightText: 2022 Wilfred Nicoll <xyzroller@rollyourown.xyz>
# SPDX-License-Identifier: GPL-3.0-or-later

global
   log /dev/log	local0
   log /dev/log	local1 notice
   chroot /var/lib/haproxy
   stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
   stats timeout 30s
   user haproxy
   group haproxy
   daemon

   tune.ssl.default-dh-param 2048
   # Default SSL material locations
   ca-base /etc/ssl/certs
   crt-base /etc/ssl/private

   # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
   ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
   ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
   ssl-default-bind-options prefer-client-ciphers no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

   ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
   ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
   ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets


defaults
   log	global
   mode	http
   option	httplog
   option	dontlognull
   timeout connect 5000
   timeout client  50000
   timeout server  50000
   errorfile 400 /etc/haproxy/errors/400.http
   errorfile 403 /etc/haproxy/errors/403.http
   errorfile 408 /etc/haproxy/errors/408.http
   errorfile 500 /etc/haproxy/errors/500.http
   errorfile 502 /etc/haproxy/errors/502.http
   errorfile 503 /etc/haproxy/errors/503.http
   errorfile 504 /etc/haproxy/errors/504.http


## Resolver for use with consul
###############################

resolvers consul
   nameserver consul 127.0.0.1:8600
   accepted_payload_size 8192


# TCP Listeners
###############

# HAProxy Admin Listener
listen stats
   bind :::6080 v4v6
   mode http
   stats enable
   stats uri /
   stats realm HAProxy\ Stats
   stats admin if LOCALHOST
   stats refresh 5s
   stats show-legends

{{range ls "service/haproxy/tcp-listeners"}}
# Port {{.Key}} listener
listen tcp_{{.Key}}
   bind :::{{.Key}} v4v6
   mode tcp
   option tcplog
   option tcpka
   option clitcpka
   option srvtcpka
   timeout connect 5s
   timeout client  60s
   timeout server  60s
   balance leastconn
   server-template {{.Value}} 1 _{{.Value}}._tcp.service.ryo resolvers consul resolve-prefer ipv4 init-addr none check
{{ end }}


## Frontends
############

# HTTP Frontend
frontend http_80
   bind :::80 v4v6
   option forwardfor
   option http-server-close
   http-request set-header X-Forwarded-Proto https if { ssl_fc }
   http-request set-header X-Forwarded-Proto http if !{ ssl_fc }

   # ACL Letsencrypt certificate renewal well-known path
   acl letsencrypt-request path_beg -i /.well-known/acme-challenge/

   # Redirect to HTTPS
   redirect scheme https code 301 if !{ ssl_fc } !letsencrypt-request

   # Letsencrypt backend rules
   use_backend certbot if letsencrypt-request
   
   # default backend rule
   default_backend default


# HTTPS Frontend
frontend http_443
   bind :::443 v4v6 ssl crt /etc/haproxy/ssl/ strict-sni alpn h2,http/1.1
   option forwardfor
   option http-server-close
   option http-pretend-keepalive
   http-request set-header X-Forwarded-Proto https if { ssl_fc }
   http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
   http-request set-header X-Forwarded-For %[src]
   http-response set-header Strict-Transport-Security "max-age=16000000; includeSubDomains;"

   ## Deny http traffic with 403 forbidden
   {{range ls "service/haproxy/deny"}}{{$aclname := printf .Key}}{{$aclhostcondition := print "service/haproxy/acl/" $aclname "/host"}}{{$aclpathcondition := print "service/haproxy/acl/" $aclname "/path"}}{{if and (keyExists $aclhostcondition) (keyExists $aclpathcondition)}}
   http-request deny deny_status 403 if { hdr(host) -i {{key $aclhostcondition}} } { path_beg,url_dec -i {{key $aclpathcondition}} }{{end}}{{end}}
   {{range ls "service/haproxy/deny"}}{{$aclname := printf .Key}}{{$aclhostcondition := print "service/haproxy/acl/" $aclname "/host"}}{{$aclpathcondition := print "service/haproxy/acl/" $aclname "/path"}}{{ if and (not (keyExists $aclhostcondition)) (keyExists $aclpathcondition) }}
   http-request deny deny_status 403 if { path_beg,url_dec -i {{key $aclpathcondition}} }{{end}}{{end}}
   {{range ls "service/haproxy/deny"}}{{$aclname := printf .Key}}{{$aclhostcondition := print "service/haproxy/acl/" $aclname "/host"}}{{$aclpathcondition := print "service/haproxy/acl/" $aclname "/path"}}{{ if and (keyExists $aclhostcondition) (not (keyExists $aclpathcondition)) }}
   http-request deny deny_status 403 if { hdr(host) -i {{key $aclhostcondition}} }{{end}}{{end}}

   ## Redirect http traffic with 302 Moved Temporarily
   {{range ls "service/haproxy/redirect"}}{{$aclname := printf .Key}}{{$aclhostcondition := print "service/haproxy/acl/" $aclname "/host"}}{{$aclpathcondition := print "service/haproxy/acl/" $aclname "/path"}}{{if and (keyExists $aclhostcondition) (keyExists $aclpathcondition)}}
   http-request redirect prefix {{.Value}} code 302 if { hdr(host) -i {{key $aclhostcondition}} } { path_beg -i {{key $aclpathcondition}} }{{end}}{{end}}
   {{range ls "service/haproxy/redirect"}}{{$aclname := printf .Key}}{{$aclhostcondition := print "service/haproxy/acl/" $aclname "/host"}}{{$aclpathcondition := print "service/haproxy/acl/" $aclname "/path"}}{{ if and (not (keyExists $aclhostcondition)) (keyExists $aclpathcondition) }}
   http-request redirect prefix {{.Value}} code 302 if { path_beg -i {{key $aclpathcondition}} }{{end}}{{end}}
   {{range ls "service/haproxy/redirect"}}{{$aclname := printf .Key}}{{$aclhostcondition := print "service/haproxy/acl/" $aclname "/host"}}{{$aclpathcondition := print "service/haproxy/acl/" $aclname "/path"}}{{ if and (keyExists $aclhostcondition) (not (keyExists $aclpathcondition)) }}
   http-request redirect prefix {{.Value}} code 302 if { hdr(host) -i {{key $aclhostcondition}} }{{end}}{{end}}

   ## Backend rules
   {{range ls "service/haproxy/use-backend"}}{{$aclname := printf .Key}}{{$aclhostcondition := print "service/haproxy/acl/" $aclname "/host"}}{{$aclpathcondition := print "service/haproxy/acl/" $aclname "/path"}}{{if and (keyExists $aclhostcondition) (keyExists $aclpathcondition)}}
   use_backend {{.Value}} if { hdr(host) -i {{key $aclhostcondition}} } { path_beg -i {{key $aclpathcondition}} }{{end}}{{end}}
   {{range ls "service/haproxy/use-backend"}}{{$aclname := printf .Key}}{{$aclhostcondition := print "service/haproxy/acl/" $aclname "/host"}}{{$aclpathcondition := print "service/haproxy/acl/" $aclname "/path"}}{{ if and (not (keyExists $aclhostcondition)) (keyExists $aclpathcondition) }}
   use_backend {{.Value}} if { path_beg -i {{key $aclpathcondition}} }{{end}}{{end}}
   {{range ls "service/haproxy/use-backend"}}{{$aclname := printf .Key}}{{$aclhostcondition := print "service/haproxy/acl/" $aclname "/host"}}{{$aclpathcondition := print "service/haproxy/acl/" $aclname "/path"}}{{ if and (keyExists $aclhostcondition) (not (keyExists $aclpathcondition)) }}
   use_backend {{.Value}} if { hdr(host) -i {{key $aclhostcondition}} }{{end}}{{end}}

   ## default backend rule
   default_backend default


## Default Backend
##################

backend default
   http-request deny deny_status 403


## Letsencrypt Backend
######################

backend certbot
   server localhost 127.0.0.1:8080


## Non-SSL Service Backends
###########################
{{range ls "service/haproxy/backends/no-ssl"}}
# {{.Key}} backend
backend {{.Key}}
   redirect scheme https if !{ ssl_fc }
   http-request set-header X-SSL %[ssl_fc]
   balance roundrobin
   #server-template {{.Key}} 1 _{{.Key}}._tcp.service.ryo resolvers consul resolve-prefer ipv4 init-addr none check
   server-template {{.Key}} 1 _{{.Key}}._tcp.service.ryo resolvers consul resolve-prefer ipv6 init-addr none check
{{ end }}

## SSL Service Backends
#######################
{{range ls "service/haproxy/backends/ssl"}}
# {{.Key}} backend
backend {{.Key}}
   redirect scheme https if !{ ssl_fc }
   http-request set-header X-SSL %[ssl_fc]
   balance roundrobin
   #server-template {{.Key}} 1 _{{.Key}}._tcp.service.ryo resolvers consul resolve-prefer ipv4 init-addr none ssl verify none check
   server-template {{.Key}} 1 _{{.Key}}._tcp.service.ryo resolvers consul resolve-prefer ipv6 init-addr none ssl verify none check
{{ end }}
